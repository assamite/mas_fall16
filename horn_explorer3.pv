from math import *
from time import time

class circle:
    def __init__(self, x, y, radius):
        self.x = x
        self.y = y
        self.radius = radius

    def move(self, dx, dy):
        self.x += dx
        self.y += dy
    
    def rotate(self, angle):
        nx = self.x * cos(angle) - self.y * sin(angle)
        ny = self.x * sin(angle) + self.y * cos(angle)
        self.x = nx
        self.y = ny

    def grow(self, delta):
        self.radius += delta


class horn:
    def __init__(self, num_circles, num_arms):
        self.num_circles = num_circles
        self.num_arms = num_arms
        self.circles = []
        for i in range(int(num_circles)):
            self.circles.append(circle(0, 0, 0))

    def stack(self, sx, sy):
        dx = sx / (self.num_circles - 1)
        dy = sy / (self.num_circles - 1)
        for i, c in enumerate(self.circles):
            c.move(i*dx, i*dy)

    def move(self, mx, my):
        for c in self.circles:
            c.move(mx, my)

    def bend(self, angle):
        delta = angle / (self.num_circles - 1)
        for i, c in enumerate(self.circles):
            c.rotate(i*delta)

    def grow(self, radius1, radius2):
        delta = (radius2 - radius1) / (self.num_circles - 1)
        for i, c in enumerate(self.circles):
            c.grow(i*delta)

class genotype:
    def __init__(self, min_gene_values, max_gene_values):
        self.gene_value_bounds = zip(min_gene_values, max_gene_values)
        self.initialise()
    
    def initialise(self):
        self.genes = []
        for min_gene_value, max_gene_value in self.gene_value_bounds:
            gene = random(min_gene_value, max_gene_value)
            self.genes.append(gene)

    def mutate(self):
        i = random(len(self.genes))
        min_gene_value, max_gene_value = self.gene_value_bounds[i]
        gene = random(min_gene_value, max_gene_value)
        self.genes[i] = gene

    def interpolate(self, genotype1, genotype2, pct):
        self.genes = []
        for g1, g2 in zip(genotype1.genes, genotype2.genes):
            gene = g1 + pct * (g2 - g1)
            self.genes.append(gene)

GENE_LABELS = ['num_points', 'num_arms', 'bend_angle1', 'bend_angle2', 'xstack1', 'ystack1', 'xstack2', 'ystack2', 'radius1', 'radius2']
MIN_GENE_VALUES = [10,  6, -pi*2, -pi*2, -100.0, -100.0, -100.0, -100.0, -50.0, -50.0]
MAX_GENE_VALUES = [10,  6,  pi*2,  pi*2,  100.0,  100.0,  100.0,  100.0,  50.0,  50.0]

def express(g):
    h = horn(g.genes[GENE_LABELS.index('num_points')], g.genes[GENE_LABELS.index('num_arms')])
    h.move(g.genes[GENE_LABELS.index('xstack1')], g.genes[GENE_LABELS.index('ystack1')])
    h.bend(g.genes[GENE_LABELS.index('bend_angle1')])
    h.stack(g.genes[GENE_LABELS.index('xstack2')], g.genes[GENE_LABELS.index('ystack2')])
    h.bend(g.genes[GENE_LABELS.index('bend_angle2')])
    h.grow(g.genes[GENE_LABELS.index('radius1')], g.genes[GENE_LABELS.index('radius2')])
    return h

def setup(anim):
    anim.pct = 0
    anim.g1 = genotype(MIN_GENE_VALUES, MAX_GENE_VALUES)
    anim.g2 = genotype(MIN_GENE_VALUES, MAX_GENE_VALUES)
    anim.g3 = genotype(MIN_GENE_VALUES, MAX_GENE_VALUES)

size(512, 512)
background(1)
speed(50)

def draw(anim):
    t = time()
    anim.pct += 0.01
    if anim.pct >= 1:
        anim.pct = 0.0
        anim.g1, anim.g2 = anim.g2, anim.g1
        anim.g2.mutate()
        #anim.g1.mutate()
    anim.g3.interpolate(anim.g1, anim.g2, anim.pct)
    h = express(anim.g3)
    a = int(ceil(h.num_arms))
    delta = 360 / a
    translate(512/2, 512/2)
    nofill()
    pen(0.4)
    stroke('black')
    with bezier(0, 0):
        for j in range(a):
            moveto(0, 0)
            with rotate(degrees=j*delta):
                for c in h.circles:
                    with translate(c.x, c.y):
                        arc(0, 0, c.radius)
    print ("Drawn in {}".format(time()-t))